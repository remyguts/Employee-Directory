{"version":3,"sources":["components/Header.js","components/Wrapper.js","utils/API.js","components/EmployeeList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Wrapper","children","axios","get","Employees","props","employees","map","employee","alt","src","picture","medium","name","first","last","phone","email","Date","dob","date","toLocaleDateString","Main","state","search","sortType","getEmployees","API","then","res","setState","data","results","console","log","catch","err","handleSortState","output","document","querySelector","value","sortedEmployees","sort","a","b","localeCompare","this","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","style","margin","color","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RAWeA,MARf,WACE,OACE,yBAAKC,UAAU,UACb,oDCASC,MAJf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OAAO,yBAAKF,UAAU,WAAWE,I,iDCDpB,EACC,WACZ,OAAOC,IAAMC,IAAI,kDCkBNC,MApBf,SAAmBC,GACjB,OACE,+BACGA,EAAMC,UAAUC,KAAI,SAACC,GAAD,OACnB,4BACE,4BACE,yBAAKC,IAAG,MAASC,IAAKF,EAASG,QAAQC,UAEzC,4BACGJ,EAASK,KAAKC,MADjB,IACyBN,EAASK,KAAKE,MAEvC,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,OACd,4BAAK,IAAIC,KAAKV,EAASW,IAAIC,MAAMC,4BCuF5BC,E,4MAjGbC,MAAQ,CACNjB,UAAW,GACXkB,OAAQ,GACRC,SAAU,I,EAOZC,aAAe,WACbC,IACGC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZxB,UAAWuB,EAAIE,KAAKC,UAEtBC,QAAQC,IAAI,EAAKX,MAAMjB,cAExB6B,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,O,EAGhCC,gBAAkB,WAChB,IACMC,EADmBC,SAASC,cAAc,kBAChBC,MAChC,GAAe,SAAXH,EAAmB,CACrB,IAAMI,EAAkB,EAAKnB,MAAMjB,UACnCoC,EAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/B,KAAKE,KAAK+B,cAAcD,EAAEhC,KAAKE,SAChE,EAAKe,SAAS,CAAExB,UAAWoC,IAE7B,GAAe,QAAXJ,EAAkB,CACpB,EAAKR,SAAS,CAAEL,SAAU,QAC1B,IAAMiB,EAAkB,EAAKnB,MAAMjB,UACnCoC,EAAgBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzB,IAAIC,KAAK0B,cAAcD,EAAE1B,IAAIC,SAC9D,EAAKU,SAAS,CAAExB,UAAWoC,IAEd,SAAXJ,GACF,EAAKR,SAAS,CAAEL,SAAU,U,kEA7B5BsB,KAAKrB,iB,+BAkCL,OACE,6BACE,yBAAK3B,UAAU,iDACb,4BACEA,UAAU,iBACViD,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMtD,UAAU,yBAElB,yBAAKA,UAAU,+BAA+BuD,GAAG,aAC/C,yBAAKvD,UAAU,UACf,yBAAKA,UAAU,qBACb,4BACEA,UAAU,eACVwD,MAAO,CACLC,OAAQ,OACRC,MAAO,SAETH,GAAG,gBACHI,SAAUX,KAAKV,iBAEf,4BAAQI,MAAM,QAAd,WACA,4BAAQA,MAAM,QAAd,aACA,4BAAQA,MAAM,OAAd,UAGJ,yBAAK1C,UAAU,YAGnB,yBAAKA,UAAU,aACb,2BAAOA,UAAU,SACf,+BACE,4BACE,qCACA,oCACA,qCACA,qCACA,qCAGJ,kBAAC,EAAD,CACE4C,KAAMI,KAAKxB,MAAME,SACjBnB,UAAWyC,KAAKxB,MAAMjB,mB,GAzFjBqD,IAAMC,W,MCaVC,MAXf,WACE,OACE,yBAAK9D,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAC8C,GACLA,EAAaC,gBAEdxC,OAAM,SAACyC,GACN3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.9bf1b43d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Styles/Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Employee Directory</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Wrapper({ children }) {\r\n  return <div className=\"wrapper\">{children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Employees(props) {\r\n  return (\r\n    <tbody>\r\n      {props.employees.map((employee) => (\r\n        <tr>\r\n          <td>\r\n            <img alt={`img`} src={employee.picture.medium}></img>\r\n          </td>\r\n          <td>\r\n            {employee.name.first} {employee.name.last}\r\n          </td>\r\n          <td>{employee.phone}</td>\r\n          <td>{employee.email}</td>\r\n          <td>{new Date(employee.dob.date).toLocaleDateString()}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default Employees;\r\n","import React from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Employees from \"./EmployeeList\";\r\n//get rid of unneeded imports\r\nclass Main extends React.Component {\r\n  state = {\r\n    employees: [],\r\n    search: \"\",\r\n    sortType: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getEmployees();\r\n  }\r\n\r\n  getEmployees = () => {\r\n    API.getEmployees()\r\n      .then((res) => {\r\n        this.setState({\r\n          employees: res.data.results,\r\n        });\r\n        console.log(this.state.employees);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  handleSortState = () => {\r\n    const selectedEmployee = document.querySelector(\"#sortSelection\");\r\n    const output = selectedEmployee.value;\r\n    if (output === \"name\") {\r\n      const sortedEmployees = this.state.employees;\r\n      sortedEmployees.sort((a, b) => a.name.last.localeCompare(b.name.last));\r\n      this.setState({ employees: sortedEmployees });\r\n    }\r\n    if (output === \"dob\") {\r\n      this.setState({ sortType: \"dob\" });\r\n      const sortedEmployees = this.state.employees;\r\n      sortedEmployees.sort((a, b) => a.dob.date.localeCompare(b.dob.date));\r\n      this.setState({ employees: sortedEmployees });\r\n    }\r\n    if (output === \"none\") {\r\n      this.setState({ sortType: \"none\" });\r\n    }\r\n  };\r\n//simplify and make less files\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse row\" id=\"navbarNav\">\r\n            <div className=\"col-5\"></div>\r\n            <div className=\"input-group col-2\">\r\n              <select\r\n                className=\"form-control\"\r\n                style={{\r\n                  margin: \"10px\",\r\n                  color: \"black\",\r\n                }}\r\n                id=\"sortSelection\"\r\n                onChange={this.handleSortState}\r\n              >\r\n                <option value=\"none\">Sort by</option>\r\n                <option value=\"name\">Last Name</option>\r\n                <option value=\"dob\">Year</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-5\"></div>\r\n          </div>\r\n        </nav>\r\n        <div className=\"container\">\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Image</th>\r\n                <th>Name</th>\r\n                <th>Phone</th>\r\n                <th>Email</th>\r\n                <th>DOB</th>\r\n              </tr>\r\n            </thead>\r\n            <Employees\r\n              sort={this.state.sortType}\r\n              employees={this.state.employees}\r\n            />\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Main from \"./components/Main\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Wrapper>\r\n        <Header />\r\n        <Main />\r\n      </Wrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}